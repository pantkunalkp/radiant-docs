{
 "tags": {},
 "filePath": "/Users/navneet/my-workspace/radiant/scripts/tmpf/Radio.tsx",
 "description": "",
 "displayName": "Radio",
 "methods": [],
 "props": {
  "checked": {
   "defaultValue": null,
   "description": "If `true`, the component is checked.",
   "name": "checked",
   "parent": {
    "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
    "name": "UseSwitchParameters"
   },
   "declarations": [
    {
     "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
     "name": "UseSwitchParameters"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "defaultChecked": {
   "defaultValue": null,
   "description": "The default checked state. Use when the component is not controlled.",
   "name": "defaultChecked",
   "parent": {
    "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
    "name": "UseSwitchParameters"
   },
   "declarations": [
    {
     "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
     "name": "UseSwitchParameters"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "disabled": {
   "defaultValue": null,
   "description": "If `true`, the component is disabled.",
   "name": "disabled",
   "parent": {
    "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
    "name": "UseSwitchParameters"
   },
   "declarations": [
    {
     "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
     "name": "UseSwitchParameters"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "onBlur": {
   "defaultValue": null,
   "description": "",
   "name": "onBlur",
   "parent": {
    "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
    "name": "UseSwitchParameters"
   },
   "declarations": [
    {
     "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
     "name": "UseSwitchParameters"
    }
   ],
   "required": false,
   "type": {
    "name": "React.FocusEventHandler"
   }
  },
  "onChange": {
   "defaultValue": null,
   "description": "Callback fired when the state is changed.\n@param event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
   "name": "onChange",
   "parent": {
    "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
    "name": "UseSwitchParameters"
   },
   "declarations": [
    {
     "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
     "name": "UseSwitchParameters"
    }
   ],
   "required": false,
   "type": {
    "name": "React.ChangeEventHandler<HTMLInputElement>"
   }
  },
  "onFocus": {
   "defaultValue": null,
   "description": "",
   "name": "onFocus",
   "parent": {
    "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
    "name": "UseSwitchParameters"
   },
   "declarations": [
    {
     "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
     "name": "UseSwitchParameters"
    }
   ],
   "required": false,
   "type": {
    "name": "React.FocusEventHandler"
   }
  },
  "onFocusVisible": {
   "defaultValue": null,
   "description": "",
   "name": "onFocusVisible",
   "parent": {
    "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
    "name": "UseSwitchParameters"
   },
   "declarations": [
    {
     "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
     "name": "UseSwitchParameters"
    }
   ],
   "required": false,
   "type": {
    "name": "React.FocusEventHandler"
   }
  },
  "readOnly": {
   "defaultValue": null,
   "description": "If `true`, the component is read only.",
   "name": "readOnly",
   "parent": {
    "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
    "name": "UseSwitchParameters"
   },
   "declarations": [
    {
     "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
     "name": "UseSwitchParameters"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "required": {
   "defaultValue": null,
   "description": "If `true`, the `input` element is required.",
   "name": "required",
   "parent": {
    "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
    "name": "UseSwitchParameters"
   },
   "declarations": [
    {
     "fileName": "radiant/node_modules/@mui/base/SwitchUnstyled/useSwitch.types.d.ts",
     "name": "UseSwitchParameters"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "checkedIcon": {
   "defaultValue": null,
   "description": "The icon to display when the component is checked.",
   "name": "checkedIcon",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "ReactNode"
   }
  },
  "className": {
   "defaultValue": null,
   "description": "Class name applied to the root element.",
   "name": "className",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "string"
   }
  },
  "component": {
   "defaultValue": null,
   "description": "The component used for the Root slot.\nEither a string to use a HTML element or a component.",
   "name": "component",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "ElementType<any>"
   }
  },
  "componentsProps": {
   "defaultValue": {
    "value": "{}"
   },
   "description": "The props used for each slot inside the component.",
   "name": "componentsProps",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "ComponentsProps"
   }
  },
  "color": {
   "defaultValue": {
    "value": "'neutral'"
   },
   "description": "The color of the component. It supports those theme colors that make sense for this component.",
   "name": "color",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "\"primary\" | \"neutral\" | \"danger\" | \"info\" | \"success\" | \"warning\""
   }
  },
  "disableIcon": {
   "defaultValue": {
    "value": "false"
   },
   "description": "If `true`, the checked icon is removed and the selected variant is applied on the `action` element instead.",
   "name": "disableIcon",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "label": {
   "defaultValue": null,
   "description": "The label element at the end the radio.",
   "name": "label",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "ReactNode"
   }
  },
  "name": {
   "defaultValue": null,
   "description": "The `name` attribute of the input.",
   "name": "name",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "string"
   }
  },
  "overlay": {
   "defaultValue": {
    "value": "false;"
   },
   "description": "If `true`, the root element's position is set to initial which allows the action area to fill the nearest positioned parent.\nThis prop is useful for composing Radio with ListItem component.",
   "name": "overlay",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "size": {
   "defaultValue": {
    "value": "'md'"
   },
   "description": "The size of the component.",
   "name": "size",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "\"sm\" | \"md\" | \"lg\""
   }
  },
  "sx": {
   "defaultValue": null,
   "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
   "name": "sx",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "SxProps"
   }
  },
  "uncheckedIcon": {
   "defaultValue": null,
   "description": "The icon to display when the component is not checked.",
   "name": "uncheckedIcon",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "ReactNode"
   }
  },
  "variant": {
   "defaultValue": {
    "value": "'outlined'"
   },
   "description": "The variant to use.",
   "name": "variant",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "\"plain\" | \"outlined\" | \"soft\" | \"solid\""
   }
  },
  "value": {
   "defaultValue": null,
   "description": "The value of the component. The DOM API casts this to a string.",
   "name": "value",
   "declarations": [
    {
     "fileName": "radiant/src/Radio/RadioProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "unknown"
   }
  }
 }
}