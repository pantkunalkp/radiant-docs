{
 "tags": {},
 "filePath": "/Users/navneet/my-workspace/radiant/scripts/tmpf/Tooltip.tsx",
 "description": "",
 "displayName": "Tooltip",
 "methods": [],
 "props": {
  "arrow": {
   "defaultValue": {
    "value": "false"
   },
   "description": "If `true`, adds an arrow to the tooltip.",
   "name": "arrow",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "children": {
   "defaultValue": null,
   "description": "Tooltip reference element.",
   "name": "children",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": true,
   "type": {
    "name": "ReactElement<any, string | JSXElementConstructor<any>>"
   }
  },
  "color": {
   "defaultValue": {
    "value": "'primary'"
   },
   "description": "The color of the component. It supports those theme colors that make sense for this component.",
   "name": "color",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "\"primary\" | \"neutral\" | \"danger\" | \"info\" | \"success\" | \"warning\""
   }
  },
  "components": {
   "defaultValue": {
    "value": "{}"
   },
   "description": "The components used for each slot inside the Tooltip.\nEither a string to use a HTML element or a component.",
   "name": "components",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "{ Root?: ElementType<any>; Arrow?: ElementType<any>; }"
   }
  },
  "componentsProps": {
   "defaultValue": {
    "value": "{}"
   },
   "description": "The props used for each slot inside the Tooltip.\nNote that `componentsProps.root` prop values win over `RootProps` if both are applied.",
   "name": "componentsProps",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "{ root?: Partial<RootProps> & TooltipComponentsPropsOverrides; arrow?: HTMLProps<HTMLSpanElement> & MUIStyledCommonProps<...> & TooltipComponentsPropsOverrides; }"
   }
  },
  "describeChild": {
   "defaultValue": {
    "value": "false"
   },
   "description": "Set to `true` if the `title` acts as an accessible description.\nBy default the `title` acts as an accessible label for the child.",
   "name": "describeChild",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "disableFocusListener": {
   "defaultValue": {
    "value": "false"
   },
   "description": "Do not respond to focus-visible events.",
   "name": "disableFocusListener",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "disableHoverListener": {
   "defaultValue": {
    "value": "false"
   },
   "description": "Do not respond to hover events.",
   "name": "disableHoverListener",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "disableInteractive": {
   "defaultValue": {
    "value": "false"
   },
   "description": "Makes a tooltip not interactive, i.e. it will close when the user\nhovers over the tooltip before the `leaveDelay` is expired.",
   "name": "disableInteractive",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "disableTouchListener": {
   "defaultValue": {
    "value": "false"
   },
   "description": "Do not respond to long press touch events.",
   "name": "disableTouchListener",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "enterDelay": {
   "defaultValue": {
    "value": "100"
   },
   "description": "The number of milliseconds to wait before showing the tooltip.\nThis prop won't impact the enter touch delay (`enterTouchDelay`).",
   "name": "enterDelay",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "number"
   }
  },
  "enterNextDelay": {
   "defaultValue": {
    "value": "0"
   },
   "description": "The number of milliseconds to wait before showing the tooltip when one was already recently opened.",
   "name": "enterNextDelay",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "number"
   }
  },
  "enterTouchDelay": {
   "defaultValue": {
    "value": "700"
   },
   "description": "The number of milliseconds a user must touch the element before showing the tooltip.",
   "name": "enterTouchDelay",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "number"
   }
  },
  "followCursor": {
   "defaultValue": {
    "value": "false"
   },
   "description": "If `true`, the tooltip follow the cursor over the wrapped element.",
   "name": "followCursor",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "id": {
   "defaultValue": null,
   "description": "This prop is used to help implement the accessibility logic.\nIf you don't provide this prop. It falls back to a randomly generated id.",
   "name": "id",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "string"
   }
  },
  "leaveDelay": {
   "defaultValue": {
    "value": "0"
   },
   "description": "The number of milliseconds to wait before hiding the tooltip.\nThis prop won't impact the leave touch delay (`leaveTouchDelay`).",
   "name": "leaveDelay",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "number"
   }
  },
  "leaveTouchDelay": {
   "defaultValue": {
    "value": "1500"
   },
   "description": "The number of milliseconds after the user stops touching an element before hiding the tooltip.",
   "name": "leaveTouchDelay",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "number"
   }
  },
  "onClose": {
   "defaultValue": null,
   "description": "Callback fired when the component requests to be closed.\n@param event The event source of the callback.",
   "name": "onClose",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "(event: Event | SyntheticEvent<Element, Event>) => void"
   }
  },
  "onOpen": {
   "defaultValue": null,
   "description": "Callback fired when the component requests to be open.\n@param event The event source of the callback.",
   "name": "onOpen",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "(event: SyntheticEvent<Element, Event>) => void"
   }
  },
  "open": {
   "defaultValue": null,
   "description": "If `true`, the component is shown.",
   "name": "open",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "boolean"
   }
  },
  "placement": {
   "defaultValue": {
    "value": "'bottom'"
   },
   "description": "Tooltip placement.",
   "name": "placement",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "\"bottom\" | \"left\" | \"right\" | \"top\" | \"bottom-end\" | \"bottom-start\" | \"left-end\" | \"left-start\" | \"right-end\" | \"right-start\" | \"top-end\" | \"top-start\""
   }
  },
  "size": {
   "defaultValue": {
    "value": "'md'"
   },
   "description": "The size of the component.",
   "name": "size",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "\"sm\" | \"md\" | \"lg\""
   }
  },
  "sx": {
   "defaultValue": null,
   "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
   "name": "sx",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "SxProps"
   }
  },
  "title": {
   "defaultValue": null,
   "description": "Tooltip title. Zero-length titles string, undefined, null and false are never displayed.",
   "name": "title",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": true,
   "type": {
    "name": "ReactNode"
   }
  },
  "variant": {
   "defaultValue": {
    "value": "'soft'"
   },
   "description": "The variant to use.",
   "name": "variant",
   "declarations": [
    {
     "fileName": "radiant/src/Tooltip/TooltipProps.ts",
     "name": "TypeLiteral"
    }
   ],
   "required": false,
   "type": {
    "name": "\"plain\" | \"outlined\" | \"soft\" | \"solid\""
   }
  }
 }
}